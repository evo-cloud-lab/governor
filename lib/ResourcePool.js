/** @fileoverview
 * Collect resource usages and reserve resource
 *
 * A reservation is defined as:
 *
 * {
 *     id: // uuid, generated by requestor
 *     resources: { // resource requests
 *         name1: {
 *             request: // object or any value according to resource type
 *             tags: [...]  // optional array to filter resources
 *         }
 *     },
 *     src: // used internally, for save the nodeId of requestor
 * }
 */

var Class = require('js-class');

function filterTags(tags, expectTags) {
    if (!Array.isArray(expectTags)) {
        return true;
    }
    Array.isArray(tags) || (tags = []);
    return expectTags.every(function (tag) {
        if (tag[0] == '~') {
            return tags.indexOf(tag.substr(1)) < 0;
        } else {
            return tags.indexOf(tag) >= 0;
        }
    });
}

function applyReservations(actualUsages, reservations) {
    var effect = {};
    for (var name in actualUsages) {
        var usage = actualUsages[name].dup();
        for (var id in reservations) {
            var resv = reservations[id];
            for (var resName in resv.resources) {
                var res = resv.resources[resName];
                if (resName == name && filterTags(usage.tags, res.tags)) {
                    usage.reserve(res.request);
                }
            }
        }
        effect[name] = usage;
    }
    return effect;
}

var NodeUsages = Class({
    constructor: function () {
        this._actualUsages = {};
        this._effectUsages = {};
        this._reservations = {};
    },

    get reservations () {
        return this._reservations;
    },

    updateUsages: function (usages) {
        this._actualUsages = {};
        usages.forEach(function (usage) {
            this._actualUsages[usage.name] = usage;
        }, this);
        this._refresh();
    },

    addReservations: function (reservations) {
        reservations.forEach(function (resv) {
            this._reservations[id] = resv;
        }, this);
        this._refresh();
    },

    removeReservations: function (ids) {
        ids.forEach(function (id) {
            delete this._reservations[id];
        }, this);
        this._refresh();
    },

    usagesAvailable: function (reservation) {
        for (var name in reservation.resources) {
            var res = reservation.resources[name];
            var usage = this._effectUsages[name];
            if (!usage || !usage.available(res.request)) {
                return false;
            }
        }
        return true;
    },

    _refresh: function () {
        this._effectUsages = applyReservations(this._actualUsages, this._reservations);
    }
});

var ResourcePool = Class({
    constructor: function (opts) {
        this._usages = {};
        this._reservedAt = {};  // map reservation Id to node Id
    },

    updateUsages: function (id, usages) {
        if (usages) {
            var nodeUsages = this._usages[id];
            nodeUsages || (nodeUsages = this._usages[id] = new NodeUsages());
            nodeUsages.updateUsages(usages);
        } else {
            delete this._usages[id];
        }
    },

    reserve: function (reservation) {
        var nodeId = this._reservedAt[reservation.id];
        var nodeUsages = nodeId && this._usages[nodeId];
        nodeUsages && nodeUsages.removeReservations([reservation.id]);
        delete this._reservedAt[reservation.id];

        var availIds = Object.keys(this._usages).filter(function (id) {
            return this._usages[id].usagesAvailable(reservation);
        }, this);
        if (availIds.length > 0) {
            var id = availIds[Math.floor(Math.random() * availIds.length)];
            this._usages[id].addReservations([reservation]);
            this._reservedAt[reservation.id] = id;
            return id;
        }
        return null;
    },

    unreserve: function (id) {
        var nodeId = this._reservedAt[id];
        var nodeUsages = nodeId && this._usages[nodeId];
        var reservation = nodeUsages && nodeUsages.reservations[id];
        nodeUsages && nodeUsages.removeReservations([id]);
        delete this._reservedAt[id];
        return reservation;
    },

    syncSources: function (ids) {
        var presents = {}, removes = [];
        ids.forEach(function (id) { presents[id] = true; });
        Object.keys(this._usages).forEach(function (id) {
            presents[id] || removes.push(id);
        });
        removes.forEach(function (id) {
            var resvs = this._usages[id].reservations;
            for (var resvId in resvs) {
                delete this._reservedAt[resvId];
            }
            delete this._usages[id];
        }, this);
    },

    clear: function () {
        this._usages = {};
    }
});

module.exports = ResourcePool;
